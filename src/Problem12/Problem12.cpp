#include <iostream>
#include "../Util/Util.h"
#include "Problem12.h"
/** Problem 12:
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */

/**
 * @param n
 * @return the first triangle number with over N divisors
 */
unsigned triangleNumWithOverNDivisors(unsigned n) {
    unsigned triangleNum = 1;
    unsigned increase = 2;
    std::vector<unsigned> primes = generatePrimes(75000);
    while (primeFactorisationNumDivisors(triangleNum, primes) <= n) {
        triangleNum += increase;
        increase++;
    }
    return triangleNum;
}


void problem12() {
    std::cout << triangleNumWithOverNDivisors(500) << std::endl;
}